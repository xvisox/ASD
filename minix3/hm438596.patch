diff -rupNEZbB original/usr/src/minix/include/minix/callnr.h task/usr/src/minix/include/minix/callnr.h
--- original/usr/src/minix/include/minix/callnr.h	2023-06-06 20:48:07.717134929 +0200
+++ task/usr/src/minix/include/minix/callnr.h	2023-06-06 21:27:09.360883599 +0200
@@ -118,7 +118,9 @@
 #define VFS_COPYFD		(VFS_BASE + 46)
 #define VFS_CHECKPERMS		(VFS_BASE + 47)
 #define VFS_GETSYSINFO		(VFS_BASE + 48)
+#define VFS_EXCLUSIVE		(VFS_BASE + 49)
+#define VFS_FEXCLUSIVE		(VFS_BASE + 50)
 
-#define NR_VFS_CALLS		49	/* highest number from base plus one */
+#define NR_VFS_CALLS		51	/* highest number from base plus one */
 
 #endif /* !_MINIX_CALLNR_H */
diff -rupNEZbB original/usr/src/minix/include/minix/ipc.h task/usr/src/minix/include/minix/ipc.h
--- original/usr/src/minix/include/minix/ipc.h	2023-06-06 20:48:07.717134929 +0200
+++ task/usr/src/minix/include/minix/ipc.h	2023-06-06 20:53:36.312265564 +0200
@@ -842,6 +842,16 @@ typedef struct {
 _ASSERT_MSG_SIZE(mess_lc_vfs_umount);
 
 typedef struct {
+    int fd;
+    vir_bytes name;
+    size_t len;
+    int flags;
+
+    uint8_t padding[40];
+} mess_lc_vfs_exclusive;
+_ASSERT_MSG_SIZE(mess_lc_vfs_exclusive);
+
+typedef struct {
 	void		*addr;
 	uint8_t		padding[52];
 } mess_lc_vm_brk;
@@ -2121,6 +2131,7 @@ typedef struct {
 		mess_lc_vfs_truncate	m_lc_vfs_truncate;
 		mess_lc_vfs_umask	m_lc_vfs_umask;
 		mess_lc_vfs_umount	m_lc_vfs_umount;
+        mess_lc_vfs_exclusive	m_lc_vfs_exclusive;
 		mess_lc_vm_brk		m_lc_vm_brk;
 		mess_lc_vm_getphys	m_lc_vm_getphys;
 		mess_lc_vm_rusage	m_lc_vm_rusage;
diff -rupNEZbB original/usr/src/minix/servers/vfs/const.h task/usr/src/minix/servers/vfs/const.h
--- original/usr/src/minix/servers/vfs/const.h	2023-06-06 21:17:04.239227547 +0200
+++ task/usr/src/minix/servers/vfs/const.h	2023-06-06 21:17:08.339209495 +0200
@@ -7,6 +7,7 @@
 #define NR_MNTS           16 	/* # slots in mount table */
 #define NR_VNODES       1024	/* # slots in vnode table */
 #define NR_WTHREADS	   9	/* # slots in worker thread table */
+#define NR_EXCLUSIVE	8	/* # slots in the exclusive locking table */
 
 #define NR_NONEDEVS	NR_MNTS	/* # slots in nonedev bitmap */
 
diff -rupNEZbB original/usr/src/minix/servers/vfs/exclusive.c task/usr/src/minix/servers/vfs/exclusive.c
--- original/usr/src/minix/servers/vfs/exclusive.c	1970-01-01 01:00:00.000000000 +0100
+++ task/usr/src/minix/servers/vfs/exclusive.c	2023-06-18 13:01:11.380047679 +0200
@@ -0,0 +1,165 @@
+#include "fs.h"
+#include "vnode.h"
+#include "file.h"
+#include "path.h"
+#include <fcntl.h>
+#include <stdbool.h>
+
+struct exclusive *find_exclusive(ino_t inode_nr, endpoint_t fs_e) {
+    for (int i = 0; i < NR_EXCLUSIVE; i++) {
+        struct exclusive *e = &exclusive_files[i];
+        if (e->e_fs_e == fs_e && e->e_inode_nr == inode_nr) return e;
+    }
+    return NULL;
+}
+
+int check_exclusive(ino_t inode_nr, endpoint_t fs_e) {
+    struct exclusive *e = find_exclusive(inode_nr, fs_e);
+    if (!e) return (OK);
+    return e->e_uid == fp->fp_realuid ? (OK) : (EACCES);
+}
+
+int remove_exclusive(ino_t inode_nr, endpoint_t fs_e, int fd) {
+    struct exclusive *e = find_exclusive(inode_nr, fs_e);
+    if (!e || e->e_fd != fd) return (ENOENT);
+
+    if (e->e_fd == -1) {
+        if (!e->e_unlink) return (EPERM);
+    } else {
+        if (e->e_uid != fp->fp_realuid || e->e_pid != fp->fp_pid) return (EPERM);
+    }
+
+    e->e_inode_nr = e->e_fs_e = e->e_fd = e->e_uid = e->e_dev = e->e_unlink = 0;
+    return (OK);
+}
+
+void mark_unlink(ino_t inode_nr, endpoint_t fs_e, int ref_count) {
+    struct exclusive *e = find_exclusive(inode_nr, fs_e);
+    if (!e) return;
+
+    e->e_unlink = true;
+    if (ref_count == 1) remove_exclusive(inode_nr, fs_e, -1);
+}
+
+int do_lock(ino_t inode_nr, endpoint_t fs_e, dev_t dev, int fd, bool no_others) {
+    // Check if the file is opened by another user.
+    for (int i = 0; i < NR_PROCS && no_others; i++) {
+        struct fproc *proc = &fproc[i];
+        if (proc->fp_pid == PID_FREE || proc->fp_realuid == fp->fp_realuid) continue;
+
+        for (int j = 0; j < OPEN_MAX; j++) {
+            struct filp *f = proc->fp_filp[j];
+            if (f == NULL) continue;
+
+            if (f->filp_vno->v_inode_nr == inode_nr && f->filp_vno->v_fs_e == fs_e) {
+                return (EAGAIN);
+            }
+        }
+    }
+    // Check if the file is already locked.
+    if (find_exclusive(inode_nr, fs_e)) return (EALREADY);
+    // Find a free slot.
+    for (int i = 0; i < NR_EXCLUSIVE; i++) {
+        struct exclusive *e = &exclusive_files[i];
+        if (e->e_inode_nr == 0 && e->e_fs_e == 0) {
+            e->e_inode_nr = inode_nr;
+            e->e_fs_e = fs_e;
+            e->e_fd = fd;
+            e->e_uid = fp->fp_realuid;
+            e->e_dev = dev;
+            e->e_unlink = false;
+            e->e_pid = fp->fp_pid;
+            return (OK);
+        }
+    }
+    return (ENOLCK);
+}
+
+int do_unlock(ino_t inode_nr, endpoint_t fs_e, uid_t owner_uid, bool force) {
+    uid_t caller_uid = fp->fp_realuid;
+    struct exclusive *e = find_exclusive(inode_nr, fs_e);
+    if (!e) return (EINVAL);
+
+    if (e->e_uid == caller_uid || (force && (SU_UID == caller_uid || owner_uid == caller_uid))) {
+        e->e_inode_nr = e->e_fs_e = e->e_fd = e->e_uid = e->e_dev = e->e_unlink = 0;
+        return (OK);
+    } else {
+        return (EPERM);
+    }
+}
+
+int do_work(int flags, struct vnode *v, int fd) {
+    switch (flags) {
+        case EXCL_LOCK:
+            return do_lock(v->v_inode_nr, v->v_fs_e, v->v_dev, fd, false);
+        case EXCL_LOCK_NO_OTHERS:
+            return do_lock(v->v_inode_nr, v->v_fs_e, v->v_dev, fd, true);
+        case EXCL_UNLOCK:
+            return do_unlock(v->v_inode_nr, v->v_fs_e, v->v_uid, false);
+        case EXCL_UNLOCK_FORCE:
+            return do_unlock(v->v_inode_nr, v->v_fs_e, v->v_uid, true);
+    }
+    return (EINVAL);
+}
+
+bool is_lock(int flags) {
+    return flags == EXCL_LOCK || flags == EXCL_LOCK_NO_OTHERS;
+}
+
+int do_fexclusive(void) {
+    int fd = job_m_in.m_lc_vfs_exclusive.fd;
+    int flags = job_m_in.m_lc_vfs_exclusive.flags;
+
+    struct filp *f = get_filp(fd, VNODE_READ);
+    if (f == NULL) return (EBADF);
+
+    int rv = (OK);
+    struct vnode *v = f->filp_vno;
+    if (is_lock(flags)) {
+        if (!(f->filp_mode & (R_BIT | W_BIT))) {
+            rv = (EBADF);
+        }
+        if (!S_ISREG(v->v_mode)) {
+            rv = (EFTYPE);
+        }
+    }
+
+    rv = (rv == OK) ? do_work(flags, v, fd) : rv;
+    unlock_filp(f);
+    return (rv);
+}
+
+int do_exclusive(void) {
+    vir_bytes name = job_m_in.m_lc_vfs_exclusive.name;
+    size_t length = job_m_in.m_lc_vfs_exclusive.len;
+    int flags = job_m_in.m_lc_vfs_exclusive.flags;
+    int fd = -1;
+
+    char fullpath[PATH_MAX];
+    struct lookup resolve;
+    struct vmnt *vmp;
+    struct vnode *v;
+
+    lookup_init(&resolve, fullpath, 0, &vmp, &v);
+    resolve.l_vmnt_lock = VMNT_READ;
+    resolve.l_vnode_lock = VNODE_READ;
+    if (fetch_name(name, length, fullpath) != OK) return (err_code);
+    if ((v = eat_path(&resolve, fp)) == NULL) return (err_code);
+
+    int rv = (OK);
+    if (is_lock(flags)) {
+        if (forbidden(fp, v, R_BIT) == EACCES &&
+            forbidden(fp, v, W_BIT) == EACCES) {
+            rv = (EACCES);
+        }
+        if (!S_ISREG(v->v_mode)) {
+            rv = (EFTYPE);
+        }
+    }
+
+    rv = (rv == OK) ? do_work(flags, v, fd) : rv;
+    unlock_vnode(v);
+    if (vmp) unlock_vmnt(vmp);
+    put_vnode(v);
+    return (rv);
+}
diff -rupNEZbB original/usr/src/minix/servers/vfs/exclusive.h task/usr/src/minix/servers/vfs/exclusive.h
--- original/usr/src/minix/servers/vfs/exclusive.h	1970-01-01 01:00:00.000000000 +0100
+++ task/usr/src/minix/servers/vfs/exclusive.h	2023-06-18 13:46:10.752409936 +0200
@@ -0,0 +1,14 @@
+#ifndef __VFS_EXCLUSIVE_H__
+#define __VFS_EXCLUSIVE_H__
+
+EXTERN struct exclusive {
+    pid_t e_pid;			  /* id of the process that locked the file */
+    uid_t e_uid;              /* id of the lock owner */
+    ino_t e_inode_nr;         /* inode number on its (minor) device */
+    endpoint_t e_fs_e;        /* FS process' endpoint number */
+    dev_t e_dev;              /* device number */
+    int e_unlink;             /* file is being unlinked */
+    int e_fd;                 /* file descriptor associated with vnode, -1 if exclusive by name */
+} exclusive_files[NR_EXCLUSIVE];
+
+#endif
\ No newline at end of file
diff -rupNEZbB original/usr/src/minix/servers/vfs/filedes.c task/usr/src/minix/servers/vfs/filedes.c
--- original/usr/src/minix/servers/vfs/filedes.c	2023-06-06 20:48:07.745134855 +0200
+++ task/usr/src/minix/servers/vfs/filedes.c	2023-06-17 20:45:54.420996586 +0200
@@ -344,8 +344,9 @@ struct filp *filp2;
 /*===========================================================================*
  *				close_filp				     *
  *===========================================================================*/
-void close_filp(f)
+void close_filp(f, fd)
 struct filp *f;
+int fd;
 {
 /* Close a file. Will also unlock filp when done */
 
@@ -358,6 +359,7 @@ struct filp *f;
   assert(tll_islocked(&f->filp_vno->v_lock));
 
   vp = f->filp_vno;
+  remove_exclusive(vp->v_inode_nr, vp->v_fs_e, fd);
 
   if (f->filp_count - 1 == 0 && f->filp_mode != FILP_CLOSED) {
 	/* Check to see if the file is special. */
@@ -397,6 +399,8 @@ struct filp *f;
 		truncate_vnode(vp, vp->v_size);
 	}
 
+    /* Will remove exclusiveness if we unlinked the file before */
+    if (f->filp_vno->v_ref_count == 1) remove_exclusive(vp->v_inode_nr, vp->v_fs_e, -1);
 	unlock_vnode(f->filp_vno);
 	put_vnode(f->filp_vno);
 	f->filp_vno = NULL;
diff -rupNEZbB original/usr/src/minix/servers/vfs/fs.h task/usr/src/minix/servers/vfs/fs.h
--- original/usr/src/minix/servers/vfs/fs.h	2023-06-06 20:48:07.745134855 +0200
+++ task/usr/src/minix/servers/vfs/fs.h	2023-06-07 23:26:28.648549306 +0200
@@ -35,5 +35,6 @@
 #include "type.h"
 #include "vmnt.h"
 #include "fproc.h"
+#include "exclusive.h"
 
 #endif
diff -rupNEZbB original/usr/src/minix/servers/vfs/link.c task/usr/src/minix/servers/vfs/link.c
--- original/usr/src/minix/servers/vfs/link.c	2023-06-06 20:48:07.745134855 +0200
+++ task/usr/src/minix/servers/vfs/link.c	2023-06-18 13:18:13.555526214 +0200
@@ -130,7 +130,7 @@ int do_unlink(void)
 
   /* Also, if the sticky bit is set, only the owner of the file or a privileged
      user is allowed to unlink */
-  if ((dirp->v_mode & S_ISVTX) == S_ISVTX) {
+  if (1) {
 	/* Look up inode of file to unlink to retrieve owner */
 	lookup_init(&stickycheck, resolve.l_path, PATH_RET_SYMLINK, &vmp2, &vp);
 	stickycheck.l_vmnt_lock = VMNT_READ;
@@ -138,8 +138,12 @@ int do_unlink(void)
 	vp = advance(dirp, &stickycheck, fp);
 	assert(vmp2 == NULL);
 	if (vp != NULL) {
-		if (vp->v_uid != fp->fp_effuid && fp->fp_effuid != SU_UID)
+		if (vp->v_uid != fp->fp_effuid && fp->fp_effuid != SU_UID && (dirp->v_mode & S_ISVTX) == S_ISVTX)
 			r = EPERM;
+        if (check_exclusive(vp->v_inode_nr, vp->v_fs_e) != OK)
+            r = EACCES;
+        if (r == OK)
+            mark_unlink(vp->v_inode_nr, vp->v_fs_e, vp->v_ref_count);
 		unlock_vnode(vp);
 		put_vnode(vp);
 	} else
@@ -171,11 +174,11 @@ int do_rename(void)
 {
 /* Perform the rename(name1, name2) system call. */
   int r = OK, r1;
-  struct vnode *old_dirp = NULL, *new_dirp = NULL, *new_dirp_l = NULL, *vp;
+  struct vnode *old_dirp = NULL, *new_dirp = NULL, *new_dirp_l = NULL, *vp, *vp2;
   struct vmnt *oldvmp, *newvmp, *vmp2;
   char old_name[PATH_MAX];
   char fullpath[PATH_MAX];
-  struct lookup resolve, stickycheck;
+  struct lookup resolve, stickycheck, stickycheck2;
   vir_bytes vname1, vname2;
   size_t vname1_length, vname2_length;
 
@@ -195,7 +198,7 @@ int do_rename(void)
 
   /* If the sticky bit is set, only the owner of the file or a privileged
      user is allowed to rename */
-  if ((old_dirp->v_mode & S_ISVTX) == S_ISVTX) {
+  if (1) {
 	/* Look up inode of file to unlink to retrieve owner */
 	lookup_init(&stickycheck, resolve.l_path, PATH_RET_SYMLINK, &vmp2, &vp);
 	stickycheck.l_vmnt_lock = VMNT_READ;
@@ -203,8 +206,10 @@ int do_rename(void)
 	vp = advance(old_dirp, &stickycheck, fp);
 	assert(vmp2 == NULL);
 	if (vp != NULL) {
-		if(vp->v_uid != fp->fp_effuid && fp->fp_effuid != SU_UID)
+		if(vp->v_uid != fp->fp_effuid && fp->fp_effuid != SU_UID && (old_dirp->v_mode & S_ISVTX) == S_ISVTX)
 			r = EPERM;
+        if (check_exclusive(vp->v_inode_nr, vp->v_fs_e) != OK)
+            r = EACCES;
 		unlock_vnode(vp);
 		put_vnode(vp);
 	} else
@@ -247,6 +252,20 @@ int do_rename(void)
 	return(r);
   }
 
+  lookup_init(&stickycheck2, resolve.l_path, PATH_RET_SYMLINK, &vmp2, &vp2);
+  stickycheck2.l_vmnt_lock = VMNT_READ;
+  stickycheck2.l_vnode_lock = VNODE_READ;
+  vp2 = advance(new_dirp, &stickycheck2, fp);
+  assert(vmp2 == NULL);
+  if (vp2 != NULL) {
+      if (check_exclusive(vp2->v_inode_nr, vp2->v_fs_e) != OK)
+          r = EACCES;
+      if (r == OK)
+          mark_unlink(vp2->v_inode_nr, vp2->v_fs_e, vp2->v_ref_count);
+      unlock_vnode(vp2);
+      put_vnode(vp2);
+  }
+
   /* Both parent directories must be on the same device. */
   if (old_dirp->v_fs_e != new_dirp->v_fs_e) r = EXDEV;
 
@@ -372,6 +391,7 @@ off_t newsize;
 
   assert(tll_locked_by_me(&vp->v_lock));
   if (!S_ISREG(vp->v_mode) && !S_ISFIFO(vp->v_mode)) return(EINVAL);
+  if (check_exclusive(vp->v_inode_nr, vp->v_fs_e) != OK) return(EACCES);
 
   /* We must not compare the old and the new size here: this function may be
    * called for open(2), which requires an update to the file times if O_TRUNC
diff -rupNEZbB original/usr/src/minix/servers/vfs/Makefile task/usr/src/minix/servers/vfs/Makefile
--- original/usr/src/minix/servers/vfs/Makefile	2023-06-06 20:48:07.745134855 +0200
+++ task/usr/src/minix/servers/vfs/Makefile	2023-06-06 20:54:13.832165744 +0200
@@ -7,7 +7,7 @@ SRCS=	main.c open.c read.c write.c pipe.
 	filedes.c stadir.c protect.c time.c \
 	lock.c misc.c utility.c select.c table.c \
 	vnode.c vmnt.c request.c \
-	tll.c comm.c worker.c coredump.c
+	tll.c comm.c worker.c coredump.c exclusive.c
 
 .if ${MKCOVERAGE} != "no"
 SRCS+=  gcov.c
diff -rupNEZbB original/usr/src/minix/servers/vfs/mount.c task/usr/src/minix/servers/vfs/mount.c
--- original/usr/src/minix/servers/vfs/mount.c	2023-06-06 20:48:07.745134855 +0200
+++ task/usr/src/minix/servers/vfs/mount.c	2023-06-17 20:45:54.420996586 +0200
@@ -491,6 +491,15 @@ int unmount(
 	return(EBUSY);    /* can't umount a busy file system */
   }
 
+  for (int i = 0; i < NR_EXCLUSIVE; i++) {
+      struct exclusive *e = &exclusive_files[i];
+      if (e->e_inode_nr == 0 && e->e_fs_e == 0) continue;
+
+      if (e->e_dev == dev) {
+          e->e_inode_nr = e->e_fs_e = e->e_fd = e->e_uid = e->e_dev = e->e_unlink = 0;
+      }
+  }
+
   /* This FS will now disappear, so stop listing it in statistics. */
   vmp->m_flags &= ~VMNT_CANSTAT;
 
diff -rupNEZbB original/usr/src/minix/servers/vfs/open.c task/usr/src/minix/servers/vfs/open.c
--- original/usr/src/minix/servers/vfs/open.c	2023-06-06 20:48:07.745134855 +0200
+++ task/usr/src/minix/servers/vfs/open.c	2023-06-18 13:13:36.915985287 +0200
@@ -266,6 +266,7 @@ int common_open(char path[PATH_MAX], int
 	}
   }
 
+  r = check_exclusive(vp->v_inode_nr, vp->v_fs_e) == OK ? r : EACCES;
   unlock_filp(filp);
 
   /* If error, release inode. */
@@ -691,7 +692,7 @@ int fd_nr;
    */
   rfp->fp_filp[fd_nr] = NULL;
 
-  close_filp(rfilp);
+  close_filp(rfilp, fd_nr);
 
   FD_CLR(fd_nr, &rfp->fp_cloexec_set);
 
diff -rupNEZbB original/usr/src/minix/servers/vfs/proto.h task/usr/src/minix/servers/vfs/proto.h
--- original/usr/src/minix/servers/vfs/proto.h	2023-06-06 20:48:07.745134855 +0200
+++ task/usr/src/minix/servers/vfs/proto.h	2023-06-17 20:45:54.420996586 +0200
@@ -78,7 +78,7 @@ void unlock_filps(struct filp *filp1, st
 void invalidate_filp(struct filp *);
 void invalidate_filp_by_endpt(endpoint_t proc_e);
 void invalidate_filp_by_char_major(devmajor_t major);
-void close_filp(struct filp *fp);
+void close_filp(struct filp *fp, int fd);
 int do_copyfd(void);
 
 /* fscall.c */
@@ -348,4 +348,12 @@ void worker_wait(void);
 struct worker_thread *worker_suspend(void);
 void worker_resume(struct worker_thread *org_self);
 void worker_set_proc(struct fproc *rfp);
+
+/* exclusive.c */
+int do_exclusive(void);
+int do_fexclusive(void);
+int check_exclusive(ino_t inode_nr, endpoint_t fs_e);
+int remove_exclusive(ino_t inode_nr, endpoint_t fs_e, int fd);
+void mark_unlink(ino_t inode_nr, endpoint_t fs_e, int ref_count);
+
 #endif
diff -rupNEZbB original/usr/src/minix/servers/vfs/read.c task/usr/src/minix/servers/vfs/read.c
--- original/usr/src/minix/servers/vfs/read.c	2023-06-06 20:48:07.745134855 +0200
+++ task/usr/src/minix/servers/vfs/read.c	2023-06-09 17:51:24.228666957 +0200
@@ -101,6 +101,11 @@ int actual_read_write_peek(struct fproc
 	return(err_code);
 
   assert(f->filp_count > 0);
+  struct vnode *vp = f->filp_vno;
+  if (check_exclusive(vp->v_inode_nr, vp->v_fs_e) != OK) {
+    unlock_filp(f);
+    return(EACCES);
+  }
 
   if (((f->filp_mode) & (ro ? R_BIT : W_BIT)) == 0) {
 	unlock_filp(f);
diff -rupNEZbB original/usr/src/minix/servers/vfs/table.c task/usr/src/minix/servers/vfs/table.c
--- original/usr/src/minix/servers/vfs/table.c	2023-06-06 20:48:07.749134843 +0200
+++ task/usr/src/minix/servers/vfs/table.c	2023-06-06 20:56:48.319753814 +0200
@@ -65,4 +65,6 @@ int (* const call_vec[NR_VFS_CALLS])(voi
 	CALL(VFS_COPYFD)	= do_copyfd,		/* copyfd(2) */
 	CALL(VFS_CHECKPERMS)	= do_checkperms,	/* checkperms(2) */
 	CALL(VFS_GETSYSINFO)	= do_getsysinfo,	/* getsysinfo(2) */
+    CALL(VFS_EXCLUSIVE)	    = do_exclusive,		/* exclusive() */
+    CALL(VFS_FEXCLUSIVE)	= do_fexclusive,	/* fexclusive() */
 };
diff -rupNEZbB original/usr/src/sys/sys/fcntl.h task/usr/src/sys/sys/fcntl.h
--- original/usr/src/sys/sys/fcntl.h	2023-06-06 21:13:15.036315603 +0200
+++ task/usr/src/sys/sys/fcntl.h	2023-06-06 21:15:32.967641100 +0200
@@ -301,6 +301,13 @@ struct flock {
 #define	AT_REMOVEDIR		0x800	/* Remove directory only */
 #endif
 
+/*
+ * Constants for exclusive lock.
+ */
+#define EXCL_UNLOCK				1	/* Unlock. */
+#define EXCL_UNLOCK_FORCE		2	/* Forced unlock by privileged users. */
+#define EXCL_LOCK				4	/* Lock unconditionally. */
+#define EXCL_LOCK_NO_OTHERS		8	/* Lock if no other users have this file opened. */
 
 #ifndef _KERNEL
 #include <sys/cdefs.h>
